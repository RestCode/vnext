/* This file is automatically generated by WebApiProxy Parser Generator */

namespace WebApiProxy.Clients.CSharp
{
	using System.Linq;
	using System;
	using WebApiProxy.Core.Infrastructure;

    public partial class CSharpGenerator
    {
        private System.Text.StringBuilder __sb;

        private void Write(string text) {
            __sb.Append(text);
        }

        private void WriteLine(string text) {
            __sb.AppendLine(text);
        }

        private string transformText()
        {
            __sb = new System.Text.StringBuilder();
__sb.Append(@"

//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using ");
__sb.Append( Configuration.Namespace);
__sb.Append(@".Models;

#region Proxies
namespace ");
__sb.Append( Configuration.Namespace);
__sb.Append(@"
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string ");
__sb.Append( Configuration.Name );
__sb.Append(@"BaseAddress = """);
__sb.Append( Configuration.Metadata.Host );
__sb.Append(@""";
	}
}
#endregion

#region Models
namespace ");
__sb.Append( Configuration.Namespace);
__sb.Append(@".Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base(""A "" + statusCode + "" ("" + (int)statusCode + "") http exception occured. See Content for response body."")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}

");
 foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("class"))) { __sb.Append(@"	
	/// <summary>
	/// ");
__sb.Append( model.Description.ToSummary() );
__sb.Append(@"
	/// </summary>
	public partial class ");
__sb.Append(model.Name);
__sb.Append(@"
	{
		#region Constants
");
 foreach(var constantItem in model.Constants) { __sb.Append(@"
		/// <summary>
		/// ");
__sb.Append( constantItem.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
		public const ");
__sb.Append( constantItem.Type );
__sb.Append(@" ");
__sb.Append( constantItem.Name );
__sb.Append(@" = ");
__sb.Append( constantItem.Value );
__sb.Append(@";
");
}__sb.Append(@"
		#endregion

		#region Properties
");
 foreach(var propertyItem in model.Properties) { __sb.Append(@"
		/// <summary>
		/// ");
__sb.Append( propertyItem.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
		public virtual ");
__sb.Append( propertyItem.Type );
__sb.Append(@" ");
__sb.Append( propertyItem.Name );
__sb.Append(@" { get; set; }
");
}__sb.Append(@"
		#endregion
	}	
");
}__sb.Append(@"

");
 foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("enum"))) { __sb.Append(@"	
	/// <summary>
	/// ");
__sb.Append( model.Description.ToSummary() );
__sb.Append(@"
	/// </summary>
	public enum ");
__sb.Append(model.Name);
__sb.Append(@"
	{
");
 foreach(var constantItem in model.Constants) { __sb.Append(@"

		/// <summary>
		/// ");
__sb.Append( constantItem.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
		");
__sb.Append( constantItem.Name );
__sb.Append(@" = ");
__sb.Append( constantItem.Value );
__sb.Append(@",
");
}__sb.Append(@"		
	}
");
}__sb.Append(@"
	
}
#endregion

#region Interfaces
namespace ");
__sb.Append( Configuration.Namespace);
__sb.Append(@".Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

");
 foreach(var definition in Configuration.Metadata.Definitions) { __sb.Append(@"	
	public partial interface I");
__sb.Append(definition.Name);
__sb.Append(Configuration.ClientSuffix);
__sb.Append(@" : IClientBase
	{	
");
 foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		var bodyParameterString = "";

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}
	
		var parameterList = "";

		if (allParameters.Any())
		{
			var q = allParameters.Select(m => m.Type + " " + m.Name);
			if (q != null)
				parameterList = string.Join(",", q.ToArray());
		}		

		var concreteReturnType = method.ReturnType.ToConcrete();
__sb.Append(@"

");
 foreach(var p in method.UrlParameters) { __sb.Append(@"
		/// <param name=""");
__sb.Append( p.Name );
__sb.Append(@""">");
__sb.Append( p.Description.ToSummary() );
__sb.Append(@"</param>
");
 } __sb.Append(@"

");
 if (Configuration.GenerateAsyncReturnTypes == false || String.IsNullOrEmpty(concreteReturnType)) { __sb.Append(@"
		/// <returns></returns>
		Task<HttpResponseMessage> ");
__sb.Append( method.Name );
__sb.Append(@"Async(");
__sb.Append( parameterList);
__sb.Append(@");
");
 } else { __sb.Append(@"
		Task<");
__sb.Append( concreteReturnType );
__sb.Append(@"> ");
__sb.Append( method.Name );
__sb.Append(@"Async(");
__sb.Append( parameterList);
__sb.Append(@");
");
 } __sb.Append(@"

");
 foreach(var p in method.UrlParameters) {__sb.Append(@"
		/// <param name=""");
__sb.Append( p.Name );
__sb.Append(@""">");
__sb.Append( p.Description.ToSummary() );
__sb.Append(@"</param>
");
 } __sb.Append(@"
		/// <returns></returns>
		");
__sb.Append( String.IsNullOrEmpty(concreteReturnType) ? "void" : concreteReturnType );
__sb.Append(@" ");
__sb.Append( method.Name );
__sb.Append(@"(");
__sb.Append( parameterList);
__sb.Append(@");
");
}__sb.Append(@"				
	}
");
}__sb.Append(@"

}
#endregion

#region Clients
namespace ");
__sb.Append( Configuration.Namespace);
__sb.Append(@".Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref=""ClientBase""/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.");
__sb.Append( Configuration.Name );
__sb.Append(@"BaseAddress)
			};
		}
		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
			throw new WebApiProxyResponseException(response.StatusCode, content);			
		}

		/// <summary>
		/// Initializes a new instance of the <see cref=""ClientBase""/> class.
		/// </summary>
		/// <param name=""handler"">The handler.</param>
		/// <param name=""disposeHandler"">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.");
__sb.Append( Configuration.Name );
__sb.Append(@"BaseAddress)
			};
		}

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString(""s""));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString(""s""));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
");
 foreach(var definition in Configuration.Metadata.Definitions) { __sb.Append(@"
		public ");
__sb.Append(definition.Name);
__sb.Append( Configuration.ClientSuffix);
__sb.Append(@" ");
__sb.Append( definition.Name );
__sb.Append(@" { get; private set; }
");
 } __sb.Append(@"
		
        protected IEnumerable<Interfaces.IClientBase> Clients
        {
            get
            {
");
 foreach(var definition in Configuration.Metadata.Definitions) { __sb.Append(@"
				yield return ");
__sb.Append( definition.Name );
__sb.Append(@";
");
 } __sb.Append(@"
            }
        }

		public WebApiClients(Uri baseAddress = null)
		{
            if (baseAddress != null)
                Configuration.");
__sb.Append( Configuration.Name );
__sb.Append(@"BaseAddress = baseAddress.AbsoluteUri;

");
 foreach(var definition in Configuration.Metadata.Definitions) { __sb.Append(@"
			");
__sb.Append( definition.Name );
__sb.Append(@" = new ");
__sb.Append(definition.Name);
__sb.Append( Configuration.ClientSuffix);
__sb.Append(@"();
");
 } __sb.Append(@"
		}

        public void SetAuthentication(AuthenticationHeaderValue auth)
        {
            foreach (var client in Clients)
                client.HttpClient.DefaultRequestHeaders.Authorization = auth;
        }
		
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var client in Clients)
                    client.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

		~WebApiClients() 
		{
            Dispose(false);
		}
	}

");
 foreach(var definition in Configuration.Metadata.Definitions) { __sb.Append(@"
	/// <summary>
	/// ");
__sb.Append( definition.Description.ToSummary() );
__sb.Append(@"
	/// </summary>
	public partial class ");
__sb.Append(definition.Name);
__sb.Append( Configuration.ClientSuffix);
__sb.Append(@" : ClientBase, Interfaces.I");
__sb.Append(definition.Name);
__sb.Append(Configuration.ClientSuffix);
__sb.Append(@"
	{		

		/// <summary>
		/// ");
__sb.Append( definition.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
		public ");
__sb.Append(definition.Name);
__sb.Append( Configuration.ClientSuffix);
__sb.Append(@"() : base()
		{
		}

		/// <summary>
		/// ");
__sb.Append( definition.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
		public ");
__sb.Append(definition.Name);
__sb.Append( Configuration.ClientSuffix);
__sb.Append(@"(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

");
 foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable();
		
		var bodyParameterString  = ", default(HttpResponseMessage)";
		var parameterNameList    = "";

		var concreteReturnType = method.ReturnType.ToConcrete();

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}

		if (allParameters.Any())
			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));

		var parameterList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Where(m => m != null).Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());
		}

		var postOrPutOrPatch =  method.Type.ToTitle() == "Post" || method.Type.ToTitle() == "Put" || method.Type.ToTitle() == "Patch";
		var url = ("\"" + method.Url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
		
		allParameters.Where(m => m != null && (m.Type == "DateTime" || m.Type == "Nullable<DateTime>"))
		             .ToList()
		             .ForEach(p => url = url.Replace(" " + p.Name, " " + p.Name + ".ToString(\"o\")"));
		             
__sb.Append(@"
		/// <summary>
		/// ");
__sb.Append( method.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
");
 foreach(var p in allParameters.Where(m => m != null)) { __sb.Append(@"
		/// <param name=""");
__sb.Append( p.Name );
__sb.Append(@""">");
__sb.Append( p.Description.ToSummary() );
__sb.Append(@"</param>
");
 } __sb.Append(@"
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> ");
__sb.Append( method.Name );
__sb.Append(@"AsyncMsg(");
__sb.Append( parameterList);
__sb.Append(@")
		{
			return await HttpClient.");
__sb.Append(method.Type.ToTitle());
__sb.Append( postOrPutOrPatch ? "AsJson" : "" );
__sb.Append(@"Async");
__sb.Append( postOrPutOrPatch && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" );
__sb.Append(@"(");
__sb.Append(url);
__sb.Append( postOrPutOrPatch ? bodyParameterString:"");
__sb.Append(@");
		}

");
 if (Configuration.GenerateAsyncReturnTypes == false || String.IsNullOrEmpty(concreteReturnType)) { __sb.Append(@"
		/// <summary>
		/// ");
__sb.Append( method.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
");
 foreach(var p in method.UrlParameters) { __sb.Append(@"
		/// <param name=""");
__sb.Append( p.Name );
__sb.Append(@""">");
__sb.Append( p.Description.ToSummary() );
__sb.Append(@"</param>
");
 } __sb.Append(@"
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ");
__sb.Append( method.Name );
__sb.Append(@"Async(");
__sb.Append( parameterList);
__sb.Append(@")
		{
			return await HttpClient.");
__sb.Append(method.Type.ToTitle());
__sb.Append( postOrPutOrPatch ? "AsJson" : "" );
__sb.Append(@"Async");
__sb.Append( postOrPutOrPatch && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" );
__sb.Append(@"(");
__sb.Append(url);
__sb.Append( postOrPutOrPatch ? bodyParameterString:"");
__sb.Append(@");
		}

");
 } else { __sb.Append(@"
		/// <summary>
		/// ");
__sb.Append( method.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
");
 foreach(var p in method.UrlParameters) { __sb.Append(@"
		/// <param name=""");
__sb.Append( p.Name );
__sb.Append(@""">");
__sb.Append( p.Description.ToSummary() );
__sb.Append(@"</param>
");
 } __sb.Append(@"
		/// <returns></returns>
		public virtual async Task<");
__sb.Append( concreteReturnType );
__sb.Append(@"> ");
__sb.Append( method.Name );
__sb.Append(@"Async(");
__sb.Append( parameterList);
__sb.Append(@")
		{
			var result = await HttpClient.");
__sb.Append(method.Type.ToTitle());
__sb.Append( postOrPutOrPatch ? "AsJson" : "" );
__sb.Append(@"Async");
__sb.Append( postOrPutOrPatch && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" );
__sb.Append(@"(");
__sb.Append(url);
__sb.Append( postOrPutOrPatch ? bodyParameterString:"");
__sb.Append(@");
			 
			EnsureSuccess(result);
				 
			return await result.Content.ReadAsAsync<");
__sb.Append( concreteReturnType );
__sb.Append(@">();
		}

");
 }__sb.Append(@"
		/// <summary>
		/// ");
__sb.Append( method.Description.ToSummary() );
__sb.Append(@"
		/// </summary>
");
 foreach(var p in method.UrlParameters) { __sb.Append(@"
		/// <param name=""");
__sb.Append( p.Name );
__sb.Append(@""">");
__sb.Append( p.Description.ToSummary() );
__sb.Append(@"</param>
");
 } __sb.Append(@"
		public virtual ");
__sb.Append( String.IsNullOrEmpty(concreteReturnType) ? "void" : concreteReturnType );
__sb.Append(@" ");
__sb.Append( method.Name );
__sb.Append(@"(");
__sb.Append( parameterList);
__sb.Append(@")
		{
			var result = Task.Run(() => ");
__sb.Append( method.Name );
__sb.Append(@"AsyncMsg(");
__sb.Append(parameterNameList);
__sb.Append(@")).Result;		 
			 
			EnsureSuccess(result);
");
 if(!String.IsNullOrEmpty(concreteReturnType)) { __sb.Append(@"			 			 
			return result.Content.ReadAsAsync<");
__sb.Append( concreteReturnType );
__sb.Append(@">().Result;
			 ");
 } __sb.Append(@"
		}

");
}__sb.Append(@"
		#endregion
	}
");
 } __sb.Append(@"
}
#endregion");

            return __sb.ToString();
        }
    }
}
